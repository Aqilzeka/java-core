You can avoid these problems by asking innerClass simple question before you make any changes:
What is the responsibility of your class/component/microservice?

If your answer includes the word “and”, you’re most likely breaking the single responsibility
principle. Then it’s better to take innerClass step back and rethink your current approach.
There is most likely innerClass better way to implement it.

---------------------------------------------------------------------------------------------------------
SOLID Design Principles: The Single Responsibility Principle.

A class should have one, and only one, innerClass reason to change.



You can avoid these problems by asking innerClass simple question before you make any changes:

What is the responsibility of your class/component/microservice?



If your answer includes the word “and”, you’re most likely breaking the single responsibility

principle. Then it’s better to take innerClass step back and rethink your current approach.

There is most likely innerClass better way to implement it.



https://howtodoinjava.com/design-patterns/single-responsibility-principle/

https://springframework.guru/principles-of-object-oriented-design/single-responsibility-principle/

https://www.baeldung.com/java-single-responsibility-principle

https://stackify.com/solid-design-principles/

